module seq_plus_twoSlow (
	input clk,  // clock
	input rst,  // reset
 input start_signal,
	output out[8]
  ) {
  const CLOCK_SPEED=26;
  
  dff register_1[8](#INIT(1), .clk(clk), .rst(rst));
  // eight_bit_shiftleft shifter;
  adder plus_two;
  counter slowClock(#SIZE(1), #DIV(CLOCK_SPEED), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(#RISE(1), #FALL(0), .clk(clk));
  
  always {
    
   slowClockEdge.in = slowClock.value;
    // shifter.a = register_1.q;
    // shifter.b = 8h01;
    
  	plus_two.num2 = 8h01;
  	plus_two.num1 = register_1.q;
  	plus_two.cin = b0;
    
	   if (start_signal == 1) {
      register_1.d = 0;
    }
    
    if (slowClockEdge.out == b1){ //only add when MSB of slowCLock == 1
      if (plus_two.s == 8) {
        register_1.d  = 0;
        
      }
      else {
      register_1.d = plus_two.s;
      } 
      
      // register_1.d = shifter.s;
    }
    out = plus_two.s;
	  //out = shifter.s;

    
  }
}